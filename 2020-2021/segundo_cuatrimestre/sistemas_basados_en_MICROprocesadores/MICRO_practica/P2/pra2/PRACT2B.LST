Turbo Assembler	 Version 2.0	    04/01/21 16:46:35	    Page 1
pract2b.asm



      1				     ; Autor: Junco de las Heras Valenzuela junco.heras@estudiante.uam.es
      2				     ; Grupo 2301 Doble	Grado.
      3				     ; Práctica 2, ejercicio b.
      4
      5				     ; DEFINICION DEL SEGMENTO DE DATOS
      6	0000			     DATOS SEGMENT
      7					     ; DEFINICION DE LOS VECTORES
      8	0000  01 02 02 04		     vector1 db	1,2,2,4
      9	0004  04 02 05 01		     vector2 db	4,2,5,1
     10	0008  03 02 04 01		     vector3 db	3,2,4,1
     11	000C  52 45 50 45 54 49	43+	     salidaError DB "REPETICION", 13, 10, '$'
     12	      49 4F 4E 0D 0A 24
     13	0019  43 4F 52 52 45 43	54+	     salidaCorrecta DB "CORRECTO", 13, 10, '$'
     14	      4F 0D 0A 24
     15	0024			     DATOS ENDS
     16
     17				     ;**************************************************************************
     18				     ; DEFINICION DEL SEGMENTO DE PILA
     19	0000			     PILA SEGMENT STACK	"STACK"
     20	0000  40*(00)			     DB	40H DUP	(0) ;ejemplo de	inicialización, 64 bytes inicializados	a 0
     21	0040			     PILA ENDS
     22				     ;**************************************************************************
     23				     ; DEFINICION DEL SEGMENTO EXTRA
     24	0000			     EXTRA SEGMENT
     25	0000  0000 0000			     RESULT DW 0,0 ;ejemplo de inicialización.	2 PALABRAS (4 BYTES)
     26	0004			     EXTRA ENDS
     27				     ;**************************************************************************
     28				     ; DEFINICION DEL SEGMENTO DE CODIGO
     29	0000			     CODE SEGMENT
     30					     ASSUME CS:	CODE, DS: DATOS, ES: EXTRA, SS:	PILA
     31					     ; COMIENZO	DEL PROCEDIMIENTO PRINCIPAL
     32	0000				     INICIO PROC
     33						     ; INICIALIZA LOS REGISTROS	DE SEGMENTO CON	SU VALOR
     34	0000  B8 0000s				     MOV AX, DATOS
     35	0003  8E D8				     MOV DS, AX
     36	0005  B8 0000s				     MOV AX, PILA
     37	0008  8E D0				     MOV SS, AX
     38	000A  B8 0000s				     MOV AX, EXTRA
     39	000D  8E C0				     MOV ES, AX
     40	000F  BC 0040				     MOV SP, 64	; CARGA	EL PUNTERO DE PILA CON EL VALOR	MAS ALTO
     41						     ; FIN DE LAS INICIALIZACIONES
     42						     ; COMIENZO	DEL PROGRAMA
     43
     44	0012  BB 0000r				     MOV BX, OFFSET vector1
     45	0015  E8 0011				     CALL EJERCICIO_B ;	Procesa	el vector1.
     46
     47	0018  BB 0004r				     MOV BX, OFFSET vector2
     48	001B  E8 000B				     CALL EJERCICIO_B ;	Procesa	el vector2.
     49
     50	001E  BB 0008r				     MOV BX, OFFSET vector3
     51	0021  E8 0005				     CALL EJERCICIO_B; Procesa el vector3.
     52
     53						     ; FIN DEL PROGRAMA
     54	0024  B8 4C00				     MOV AX, 4C00H
     55	0027  CD 21				     INT 21H
     56
     57	0029				     INICIO ENDP
Turbo Assembler	 Version 2.0	    04/01/21 16:46:35	    Page 2
pract2b.asm



     58					     ;ESPACIO PARA SUBRUTINAS
     59					     ; Escribe salidaCorrecta si los numeros del vector
     60					     ; con base	en BX no tienen	elementos repetidos, sino escribe salidaError.
     61	0029				     EJERCICIO_B PROC
     62						     ; BUCLE_EXTERIOR itera desde [BX][3] HASTA	[BX][1].
     63						     ; El pseudocodigo seria, si nuestro vector	es v,
     64						     ; for(i = n-1; i >	0; i--)	for(j =	i-1; j >= 0; j--) if(v[i] == v[j])	    +
     65				     salidaError.
     66	0029  B9 0004				     MOV CX, 4 ; El vector tiene dimension 4.
     67
     68	002C  41				     INC CX
     69	002D					     BUCLE_EXTERIOR:
     70	002D  49				     DEC CX ; CX ES EL CONTADOR	DEL BUCLE EXTERIOR.
     71	002E  E3 13				     JCXZ VALID
     72	0030  8B F1				     MOV SI, CX
     73	0032  8A 40 FF				     MOV AL, BYTE PTR [BX][SI-1] ; Elemento v[i] para comparar.
     74
     75	0035  8B D1				     MOV DX, CX
     76						     ; COMPARA LOS ELEMENTOS [BX][0] HASTA [BX][SI-2] CON [BX][SI-1].
     77	0037					     BUCLE_INTERIOR:
     78	0037  4A				     DEC DX ; DX ES EL CONTADOR	DEL BUCLE INTERIOR.
     79	0038  74 F3				     JZ	BUCLE_EXTERIOR
     80	003A  8B F2				     MOV SI, DX
     81	003C  3A 40 FF				     CMP AL, BYTE PTR [BX][SI-1] ; Elemento v[j] para comparar.
     82	003F  74 0A				     JZ	INVALID
     83	0041  EB F4				     JMP BUCLE_INTERIOR
     84
     85	0043					     VALID: ; Imprime salidaCorrecta.
     86	0043  B4 09				     MOV AH, 09H
     87	0045  BA 0019r				     MOV DX, OFFSET salidaCorrecta
     88	0048  CD 21				     INT 21H
     89
     90	004A  C3				     RET
     91
     92	004B					     INVALID: ;	Imprime	salidaError.
     93	004B  B4 09				     MOV AH, 09H
     94	004D  BA 000Cr				     MOV DX, OFFSET salidaError
     95	0050  CD 21				     INT 21H
     96
     97	0052  C3				     RET
     98	0053				     EJERCICIO_B ENDP
     99
    100
    101
    102				     ; FIN DEL SEGMENTO	DE CODIGO
    103	0053			     CODE ENDS
    104				     ; FIN DEL PROGRAMA	INDICANDO DONDE	COMIENZA LA EJECUCION
    105				     END INICIO
Turbo Assembler	 Version 2.0	    04/01/21 16:46:35	    Page 3
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "04/01/21"
??FILENAME			  Text	 "pract2b "
??TIME				  Text	 "16:46:35"
??VERSION			  Number 0200
@CPU				  Text	 0101H
@CURSEG				  Text	 CODE
@FILENAME			  Text	 PRACT2B
@WORDSIZE			  Text	 2
BUCLE_EXTERIOR			  Near	 CODE:002D
BUCLE_INTERIOR			  Near	 CODE:0037
EJERCICIO_B			  Near	 CODE:0029
INICIO				  Near	 CODE:0000
INVALID				  Near	 CODE:004B
RESULT				  Word	 EXTRA:0000
SALIDACORRECTA			  Byte	 DATOS:0019
SALIDAERROR			  Byte	 DATOS:000C
VALID				  Near	 CODE:0043
VECTOR1				  Byte	 DATOS:0000
VECTOR2				  Byte	 DATOS:0004
VECTOR3				  Byte	 DATOS:0008

Groups & Segments		  Bit Size Align  Combine Class

CODE				  16  0053 Para	  none
DATOS				  16  0024 Para	  none
EXTRA				  16  0004 Para	  none
PILA				  16  0040 Para	  Stack	  STACK
